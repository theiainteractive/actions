name: Test, Build, Deploy (CI/CD)

on:
  workflow_call:
    secrets:
      token:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      slack_webhook_cicd:
        required: true

defaults:
  run:
    shell: bash

env:
  SLACK_WEBHOOK_URL:      ${{ secrets.slack_webhook_cicd }}
  PLUGIN_PATH_RELATIVE:   Engine/Plugins
  PLUGIN_TMP_DIR_PREFIX:  BuildTemp

jobs:
  meta:
    name: Generate Metadata
    runs-on: windows-10
    outputs:
      type:           ${{ steps.releaseCheck.outputs.type }}
      version:        ${{ steps.releaseVersion.outputs.version || steps.buildVersion.outputs.version }}
      notes:          ${{ steps.releaseNotes.outputs.notes }}
      matrix:         ${{ steps.generateMatrix.outputs.matrix }}
      matrix_clean:   ${{ steps.generateMatrixClean.outputs.matrix_clean }}
      release_clean:  ${{ steps.releaseClean.outputs.release_clean }}
      upload_github:  ${{ steps.assetUploadTargets.outputs.github }}
      upload_s3:      ${{ steps.assetUploadTargets.outputs.s3 }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.token }}
          fetch-depth: 0 # Needed for semantic versioning below

      - name: Check Release
        id: releaseCheck
        run: |
          if [[ "${{ github.event.inputs.type }}" == "release" \
              || ( "${{ github.ref }}" =~ "release/" \
                && `git rev-parse @:VERSION` != `git rev-parse @~:VERSION` \
                && "${{ github.event_name }}" != "pull_request" ) ]]
          then
            echo "Setting output to release"
            echo "type=release" >> $GITHUB_OUTPUT
          else
            echo "Setting output to build"
            echo "type=build" >> $GITHUB_OUTPUT
          fi

      - name: Read Release Version
        if: steps.releaseCheck.outputs.type=='release'
        id: releaseVersion
        run: |
          if [[ ! -z "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT"
          else
            echo "version=$(head -1 VERSION | xargs)" >> $GITHUB_OUTPUT
          fi

      - name: Read Release Notes
        if: steps.releaseCheck.outputs.type=='release'
        id: releaseNotes
        run: |
          sed -i 's/<version>/${{ steps.releaseVersion.outputs.version }}/g' docs/RELEASE.md
          RELEASE=$(cat docs/RELEASE.md)
          RELEASE="${RELEASE//'%'/'%25'}"
          RELEASE="${RELEASE//$'\n'/'%0A'}"
          RELEASE="${RELEASE//$'\r'/'%0D'}"
          echo "notes=$RELEASE" >> $GITHUB_OUTPUT

      - name: Generate Build Version
        if: steps.releaseCheck.outputs.type!='release'
        id: buildVersion
        uses: paulhatch/semantic-version@v5.0.0
        with:
          version_format: '${major}.${minor}.${patch}-dev${increment}'

      - name: Setup Job Matrixes
        id: generateMatrix
        run: |
          [[ "${{ steps.releaseCheck.outputs.type }}" == "release" ]] && ENVIRONMENT="production" || ENVIRONMENT="development"
          while read ue_version target_platform host_platform experimental test; do
            ue_version=$(echo $ue_version | xargs)
            host_platform=$(echo $host_platform | xargs)
            target_platform=$(echo $target_platform | xargs)
            experimental=$(echo $experimental | xargs)
            test=$(echo $test | xargs)
            ENTRIES="$ENTRIES{\"ue_version\": \"$ue_version\", \"host_platform\": \"$host_platform\", \"target_platform\": \"$target_platform\", \"experimental\": \"$experimental\", \"test\": \"$test\"},"
          done <<< $(yq -r ".envs.$ENVIRONMENT.matrix[] | [.ue_version, .target_platform, .host_platform, .experimental, .test] | @tsv" config.yml)
          echo "matrix={\"include\":[$ENTRIES]}" >> $GITHUB_OUTPUT

      - name: Setup Clean Release Asset Matrix
        id: generateMatrixClean
        if: steps.releaseCheck.outputs.type=='release'
        run: |
          if [[ "$(yq -r ".envs.production.matrix_clean" config.yml)" != "null" ]]; then
            while read ue_version experimental; do
              ue_version=$(echo $ue_version | xargs)
              experimental=$(echo $experimental | xargs)
              ENTRIES="$ENTRIES{\"ue_version\": \"$ue_version\", \"experimental\": \"$experimental\"},"
            done <<< $(yq -r ".envs.production.matrix_clean[] | [.ue_version, .experimental] | @tsv" config.yml)
            echo "release_clean=true"
          else
            echo "release_clean=false"
          fi
          echo "matrix_clean={\"include\":[$ENTRIES]}" >> $GITHUB_OUTPUT
          echo "{\"include\":[$ENTRIES]}"

      - name: Asset Upload Targets
        id: assetUploadTargets
        run: |
          echo "github=$(yq -r .build_settings.upload_assets.github config.yml)" >> $GITHUB_OUTPUT
          echo "s3=$(yq -r .build_settings.upload_assets.aws config.yml)" >> $GITHUB_OUTPUT

      - name: Extract Slack Notification Data
        id: slack
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - uses: act10ns/slack@v1
        if: always()
        with:
          channel: '#cicd'
          config: .github/slack/toast.yml
          status: starting
        env:
          matrix: ${{ steps.generateMatrix.outputs.matrix }}
          commit: ${{ github.event.head_commit.message }}

  build:
    name: Build for ${{ matrix.target_platform }} UE${{ matrix.ue_version }} on ${{ matrix.host_platform }}
    runs-on: ${{ matrix.host_platform }}
    needs: [meta]
    continue-on-error: ${{ matrix.experimental == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.meta.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
          token: ${{ secrets.token }}
          submodules: true
      
      - name: Ensure LFS Assets Dereferenced
        run: git lfs pull

      - name: Environment Variables
        id: inject
        run: |
          [[ "${{ needs.meta.outputs.type }}" == "release" ]] && ENVIRONMENT="production" || ENVIRONMENT="development"
          make dev ue="${{ matrix.ue_version }}" version="${{ needs.meta.outputs.version }}" env="$ENVIRONMENT" target_platform="${{ matrix.target_platform }}"
          make env-inject
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-central-1

      - name: Coalesce Dependencies
        id: dependencies
        run: |
          if [[ "$(yq -r ".build_settings.dependencies" config.yml)" != "null" ]]; then
            aws configure set default.s3.use_accelerate_endpoint true
            aws configure set default.s3.multipart_threshold 300MB
            while read S3_URL NAME PLUGIN_TYPE; do
                aws s3 cp "$S3_URL/$NAME-ue${{ steps.inject.outputs.VERSION_UE }}-${{ steps.inject.outputs.PLATFORM_UE }}-latest.zip" $PLUGIN_TMP_DIR
                PLUGIN_TYPE_FOLDER=$PLUGIN_TYPE
            done <<< $(yq -r ".build_settings.dependencies[] | [.s3, .name, .plugin_type] | @tsv" config.yml)
            PLUGIN_TMP_DIR=$(mktemp -d ${{ env.PLUGIN_TMP_DIR_PREFIX }}-XXXXXX)
            echo "pluginsdir=$PLUGIN_TMP_DIR" >> $GITHUB_OUTPUT
            echo "dependencies_exist=true" >> $GITHUB_OUTPUT
            echo "plugin_type_folder=$PLUGIN_TYPE_FOLDER" >> $GITHUB_OUTPUT
          else
            echo "dependencies_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract Dependencies
        if: steps.dependencies.outputs.dependencies_exist=='true'
        run: |
          pushd "${{ steps.dependencies.outputs.pluginsdir }}"
            for ZIP in *.zip; do
              if [[ "${{ steps.inject.outputs.PLATFORM_HOST }}" == "windows" ]]; then
                  7z x -y "$ZIP"
                  rm $ZIP
              else
                  unzip "$ZIP"
                  rm $ZIP
              fi
            done
          popd

      - name: Move Dependencies to Engine Plugin Directory
        if: steps.dependencies.outputs.dependencies_exist=='true'
        run: |
          EDITOR_PLUGIN_DIR="${{ steps.inject.outputs.UE_ROOT }}/Engine/Plugins/${{ steps.dependencies.outputs.plugin_type_folder }}"
          if [ ! -d "$EDITOR_PLUGIN_DIR" ]; then
            mkdir -p "$EDITOR_PLUGIN_DIR"
          fi
          mv "${{ steps.dependencies.outputs.pluginsdir }}" "$EDITOR_PLUGIN_DIR"

      - name: Build
        run: if [[ "${{ needs.meta.outputs.type }}" == "release" ]]; then make package; else make build; fi

      - name: Run Tests
        if: matrix.test=='true'
        run: make test nobuild=true 

      - name: Deploy Artifact
        if: needs.meta.outputs.upload_s3=='true'
        run: make deploy

      - name: Upload Build Artifact to Github
        uses: actions/upload-artifact@v2
        if: needs.meta.outputs.upload_github=='true'
        with:
          name: ${{ steps.inject.outputs.SIG_PRECISE }}.zip
          path: ./${{ steps.inject.outputs.PATH_ARTIFACT_RELATIVE }}/${{ steps.inject.outputs.SIG_PRECISE }}.zip

      - name: Cleanup Work Area
        if: always()
        run: |
          make clean
          rm -rf "${{ steps.dependencies.outputs.pluginsdir }}"

      - name: Cleanup Engine Plugin Directory
        if: always()
        run: |
          EDITOR_PLUGIN_DIR="${{ steps.inject.outputs.UE_ROOT }}/Engine/Plugins/${{ steps.dependencies.outputs.plugin_type_folder }}"
          EDITOR_PLUGIN_DIR="$(echo $EDITOR_PLUGIN_DIR | sed 's/\\/\//g')"
          rm -rf "$EDITOR_PLUGIN_DIR/"${{ env.PLUGIN_TMP_DIR_PREFIX }}-*

      - uses: act10ns/slack@v1
        if: always()
        with:
          channel: '#cicd'
          status: ${{ job.status }}
          config: .github/slack/toast_build.yml
        env:
          target_platform: ${{ matrix.target_platform }}
          ue_version: ${{ matrix.ue_version }}
          commit: ${{ github.event.head_commit.message }}

  build-complete-notify:
    name: Notify Slack on Build Matrix Complete
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - name: Notify Slack
        uses: act10ns/slack@v1
        with:
          channel: '#cicd'
          status: ${{ needs.build.result }}
          message: "{{icon jobStatus}} - Build matrix {{jobStatus}}"

  release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [meta, build]
    if: needs.meta.outputs.type=='release'
    outputs:
      upload_url: ${{ steps.createRelease.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.token }}

      - uses: actions/create-release@master
        id: createRelease
        name: Create ${{ needs.meta.outputs.version }} Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: "v${{ needs.meta.outputs.version }}"
          release_name: "v${{ needs.meta.outputs.version }}"
          body: |
            ${{ needs.meta.outputs.notes }}
          prerelease: false

      - name: Notify Slack
        uses: act10ns/slack@v1
        with:
          channel: '#cicd'
          status: ${{ needs.build.result }}
          message: "{{icon jobStatus}} - Release ${{ needs.meta.outputs.version }} created"

  release-assets:
    name: Upload Asset ${{ matrix.target_platform }} UE${{ matrix.ue_version }} ${{ matrix.host_platform}}
    runs-on: ${{ matrix.host_platform }}
    needs: [meta, release]
    if: needs.meta.outputs.type=='release' && needs.meta.outputs.upload_github=='true' && needs.meta.outputs.upload_s3=='true'
    continue-on-error: ${{ matrix.experimental == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.meta.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.token }}

      - name: Inject Env into GHA
        id: inject
        run: |
          make dev ue="${{ matrix.ue_version }}" version="${{ needs.meta.outputs.version }}" env=production target_platform="${{ matrix.target_platform }}"
          make env-inject

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-central-1

      - name: Download Release Asset From S3
        run: aws s3 cp ${{ steps.inject.outputs.PATH_DEPLOY_PRECISE }} ./${{ steps.inject.outputs.SIG_PRECISE }}.zip

      - name: Upload Built Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: "${{ needs.release.outputs.upload_url }}"
          asset_path: ./${{ steps.inject.outputs.SIG_PRECISE }}.zip
          asset_name: ${{ steps.inject.outputs.SIG_VERSION }}.zip
          asset_content_type: application/octet-stream

  release-assets-clean:
    name: Upload Clean Asset UE${{ matrix.ue_version }}
    runs-on: windows-10
    needs: [meta, release]
    if: needs.meta.outputs.type=='release' && inputs.upload_assets.github=='true' && needs.meta.outputs.release_clean=='true'
    continue-on-error: ${{ matrix.experimental == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.meta.outputs.matrix_clean) }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.token }}

      - name: Inject Env into GHA
        id: inject
        run: |
          make dev ue="${{ matrix.ue_version }}" version="${{ needs.meta.outputs.version }}" env=production
          make env-inject

      - name: Assemble Clean Release Asset
        run: |
          rm -rf src/HostProject
          cp -R src/* ${{ steps.inject.outputs.PACKAGE_NAME }}
          cp lib/config/${{ matrix.ue_version }}/* ${{ steps.inject.outputs.PACKAGE_NAME }}/
          cp VERSION ${{ steps.inject.outputs.PACKAGE_NAME }}/
          rm -rf ${{ steps.inject.outputs.PACKAGE_NAME }}/Content/Tests
          rm -rf ${{ steps.inject.outputs.PACKAGE_NAME }}/Source/*/Public/Tests
          rm -rf ${{ steps.inject.outputs.PACKAGE_NAME }}/Source/*/Private/Tests

      - name: Compress Clean Release Asset (.zip)
        run: 7z a -tzip "${{ steps.inject.outputs.SIG_CLEAN }}.zip" "${{ steps.inject.outputs.PACKAGE_NAME }}"

      - name: Upload Clean Release Artifact to Github
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.inject.outputs.SIG_CLEAN }}.zip
          path: ./${{ steps.inject.outputs.SIG_CLEAN }}.zip

      - name: Upload Clean Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: "${{ needs.release.outputs.upload_url }}"
          asset_path: ./${{ steps.inject.outputs.SIG_CLEAN }}.zip
          asset_name: ${{ steps.inject.outputs.SIG_CLEAN }}.zip
          asset_content_type: application/octet-stream

  release-pr:
    name: PR Release Into ${{ matrix.destination_branch }}
    runs-on: ubuntu-latest
    needs: [meta, release]
    if: needs.meta.outputs.type=='release'
    strategy:
      fail-fast: false
      matrix:
        destination_branch:
          - develop
          - master
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.token }}

      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ github.ref }}
          destination_branch: ${{ matrix.destination_branch }}
          pr_title: 'Merge release ${{ needs.meta.outputs.version }} into ${{ matrix.destination_branch }}'
          pr_body: | 
            ${{ needs.meta.outputs.notes }}
          pr_reviewer: ${{ env.REVIEWERS }}
          pr_assignee:  ${{ env.ASSIGNEES }}
          pr_label: 'automated,release'
          pr_draft: false
          pr_allow_empty: true
          github_token: ${{ github.token }}
